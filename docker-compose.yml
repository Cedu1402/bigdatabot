services:
  loki:
    image: grafana/loki:2.8.0
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki_data:/loki
    restart: always
    networks:
      - app_network

  grafana:
    image: grafana/grafana:10.1.0
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    depends_on:
      - loki
    restart: always
    networks:
      - app_network

  # Redis service for queue management
  redis:
    image: redis:alpine
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - app_network
    command: [ "redis-server", "--appendonly", "yes" ] # Enables AOF for persistence
    restart: always

  event_queue:
    build:
      context: .
      dockerfile: Dockerfile
    command: rq worker --url redis://redis:6379 EVENT_QUEUE
    environment:
      - REDIS_URL=redis
      - LOKI_URL=loki
    networks:
      - app_network
    depends_on:
      - redis
    restart: always
    deploy:
      replicas: 10

  token_queue:
    build:
      context: .
      dockerfile: Dockerfile
    command: rq worker --url redis://redis:6379 TOKEN_QUEUE --timeout 19000
    environment:
      - REDIS_URL=redis
      - LOKI_URL=loki
    networks:
      - app_network
    depends_on:
      - redis
    restart: always
    deploy:
      replicas: 10

  trade_queue:
    build:
      context: .
      dockerfile: Dockerfile
    command: rq worker --url redis://redis:6379 TRADE_QUEUE --timeout 9000
    environment:
      - REDIS_URL=redis
      - LOKI_URL=loki
    networks:
      - app_network
    depends_on:
      - redis
    restart: always
    deploy:
      replicas: 10

  price_watcher:
    build:
      context: .
      dockerfile: Dockerfile
    command: python bot/sol_price_watcher.py
    environment:
      - REDIS_URL=redis
      - LOKI_URL=loki
    networks:
      - app_network
    depends_on:
      - redis
    restart: always

  bot_main:
    build:
      context: .
      dockerfile: Dockerfile
    command: python bot/bot_main.py
    environment:
      - REDIS_URL=redis
      - LOKI_URL=loki
    networks:
      - app_network
    depends_on:
      - redis
    restart: always

  bot_stats:
    build:
      context: .
      dockerfile: Dockerfile
    command: python bot/bot_stats.py
    environment:
      - REDIS_URL=redis
      - LOKI_URL=loki
    networks:
      - app_network
    depends_on:
      - redis
    restart: always

volumes:
  loki_data:
    driver: local
  redis_data:
    driver: local

networks:
  app_network:
    driver: bridge